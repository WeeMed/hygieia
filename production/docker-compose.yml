services:
  nginx:
    image: nginx:alpine
    container_name: hygieia-nginx
    restart: always
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
    # nginx doesn't need to depend on any services as it's a reverse proxy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot
    container_name: hygieia-certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    environment:
      - CERTBOT_EMAIL=${SSL_EMAIL:-}
      - CERTBOT_DOMAIN=${DOMAIN:-}
    command: |
      sh -c "
        if [ ! -f /etc/letsencrypt/live/${DOMAIN:-}/fullchain.pem ]; then
          certbot certonly --webroot --webroot-path=/var/www/certbot --email=${SSL_EMAIL:-} --agree-tos --no-eff-email -d ${DOMAIN:-};
        fi;
        trap exit TERM;
        while :; do
          certbot renew;
          sleep 12h & wait $!;
        done;
      "
    profiles:
      - ssl-auto

  core:
    image: ${REGISTRY:-ghcr.io/weemed/hygieia}/core:${TAG:-latest}
    container_name: hygieia-core
    restart: always
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - ENV=${ENV:-production}
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-hygieia}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/${REDIS_DB:-0}
      - DEPLOYMENT_MODE=${DEPLOYMENT_MODE:-local}
      - STORE_PII=${STORE_PII:-true}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MASTER_KEY=${MASTER_KEY}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-*}
      - GLOBAL_ID_SALT=${GLOBAL_ID_SALT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  hi-hope:
    image: ${REGISTRY:-ghcr.io/weemed/hygieia}/hi-hope:${TAG:-latest}
    container_name: hygieia-hi-hope
    restart: always
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_PRODUCT=hi-hope
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost/api/v1}
      - NEXT_PUBLIC_ORGANIZATION_ID=${NEXT_PUBLIC_ORGANIZATION_ID:-}
      - NEXT_PUBLIC_ORGANIZATION_NAME=${NEXT_PUBLIC_ORGANIZATION_NAME:-}
      - NEXT_PUBLIC_DEPLOYMENT_ENV=${NEXT_PUBLIC_DEPLOYMENT_ENV:-production}
      - NODE_ENV=production
    depends_on:
      - core

  hi-care:
    image: ${REGISTRY:-ghcr.io/weemed/hygieia}/hi-care:${TAG:-latest}
    container_name: hygieia-hi-care
    restart: always
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_PRODUCT=hi-care
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost/api/v1}
      - NEXT_PUBLIC_ORGANIZATION_ID=${NEXT_PUBLIC_ORGANIZATION_ID:-}
      - NEXT_PUBLIC_ORGANIZATION_NAME=${NEXT_PUBLIC_ORGANIZATION_NAME:-}
      - NEXT_PUBLIC_DEPLOYMENT_ENV=${NEXT_PUBLIC_DEPLOYMENT_ENV:-production}
      - NODE_ENV=production
    depends_on:
      - core

  hi-checkup:
    image: ${REGISTRY:-ghcr.io/weemed/hygieia}/hi-checkup:${TAG:-latest}
    container_name: hygieia-hi-checkup
    restart: always
    expose:
      - "3000"
    environment:
      - NEXT_PUBLIC_PRODUCT=hi-checkup
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://localhost/api/v1}
      - NEXT_PUBLIC_ORGANIZATION_ID=${NEXT_PUBLIC_ORGANIZATION_ID:-}
      - NEXT_PUBLIC_ORGANIZATION_NAME=${NEXT_PUBLIC_ORGANIZATION_NAME:-}
      - NEXT_PUBLIC_DEPLOYMENT_ENV=${NEXT_PUBLIC_DEPLOYMENT_ENV:-production}
      - NODE_ENV=production
    depends_on:
      - core

  db:
    image: postgres:16
    container_name: hygieia-db
    restart: always
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_DB=${DB_NAME:-hygieia}
    expose:
      - "5432"
    volumes:
      - hygieia-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: hygieia-redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  hygieia-db-data:
    name: hygieia-db-data-${INSTANCE_ID:-hygieia}
  redis-data:
    name: hygieia-redis-data-${INSTANCE_ID:-hygieia}
